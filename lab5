{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["my_tuple = (1,2,3,4,5,6,7)\n","print('Before the type is:')\n","print(type(my_tuple))\n","my_tuple = str(my_tuple)\n","print('After the type is:')\n","print(type(my_tuple))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xTeRKV4-_9FF","executionInfo":{"status":"ok","timestamp":1726593743891,"user_tz":-345,"elapsed":4,"user":{"displayName":"Mr Shronal","userId":"17347807462710732592"}},"outputId":"164899d4-c021-45fe-9f06-db590596dd9a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Before the type is:\n","<class 'tuple'>\n","After the type is:\n","<class 'str'>\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GaLjNhBD73kP","executionInfo":{"status":"ok","timestamp":1726592620782,"user_tz":-345,"elapsed":545,"user":{"displayName":"Mr Shronal","userId":"17347807462710732592"}},"outputId":"9049e0a8-7587-4951-e5a5-1e03e72ce40c"},"outputs":[{"output_type":"stream","name":"stdout","text":["4\n"]}],"source":["my_tuple = (1,2,3,4,5,6,7)\n","get4th = my_tuple[-4]\n","print(get4th)"]},{"cell_type":"code","source":["my_tuple = (1,2,3,4,5,1,2,5,7,6,7)\n","print(\"The repeated elements are:\")\n","for x in range (len(my_tuple)):\n","    for y in range (x+1, len(my_tuple)):\n","        if my_tuple[x] == my_tuple[y]:\n","            print(my_tuple[x], end = \" \")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"id":"HP5H1en-8NyD","executionInfo":{"status":"ok","timestamp":1727275152630,"user_tz":-345,"elapsed":496,"user":{"displayName":"Mr Shronal","userId":"17347807462710732592"}},"outputId":"1a6e8952-e522-4684-d2ec-eda878344790"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["The repeated elements are:\n","1 2 5 7 "]}]},{"cell_type":"markdown","source":[" Write a Python program to replace the last value of tuples in a list.\n","Sample list: [(10, 20, 40), (40, 50, 60), (70, 80, 90)]\n","Expected Output: [(10, 20, 100), (40, 50, 100), (70, 80, 100)]\n","\n"],"metadata":{"id":"qNOaFHUB-FiU"}},{"cell_type":"code","source":["my_tuple = [(10, 20, 40), (40, 50, 60), (70, 80, 90)]\n","for x in range(len(my_tuple)):\n","    my_tuple[x] = list(my_tuple[x])\n","    my_tuple[x][-1] = 100\n","    my_tuple[x] = tuple(my_tuple[x])\n","print(my_tuple)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hjkFOoNA9Acd","executionInfo":{"status":"ok","timestamp":1726593308758,"user_tz":-345,"elapsed":494,"user":{"displayName":"Mr Shronal","userId":"17347807462710732592"}},"outputId":"0b16f340-33e8-45fe-a187-225d44bcf6df"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[(10, 20, 100), (40, 50, 100), (70, 80, 100)]\n"]}]},{"cell_type":"code","source":["my_tuple = (1,2,3,4,5,1,2,5,7,6,7)\n","for x in range (len(my_tuple)):\n","    for y in range (x+1, len(my_tuple)):\n","        if my_tuple[x] == my_tuple[y]:\n","            print(my_tuple[x])\n","        else:\n","            print(my_tuple[x])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HRXWNux2rHUx","executionInfo":{"status":"ok","timestamp":1726797419405,"user_tz":-540,"elapsed":445,"user":{"displayName":"Subekshya Karki","userId":"18102262113570423530"}},"outputId":"feebf07b-00f2-466e-ec5c-ac91c7063371","collapsed":true},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","1\n","1\n","1\n","1\n","1\n","1\n","1\n","1\n","1\n","2\n","2\n","2\n","2\n","2\n","2\n","2\n","2\n","2\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","3\n","4\n","4\n","4\n","4\n","4\n","4\n","4\n","5\n","5\n","5\n","5\n","5\n","5\n","1\n","1\n","1\n","1\n","1\n","2\n","2\n","2\n","2\n","5\n","5\n","5\n","7\n","7\n","6\n"]}]},{"cell_type":"code","source":["data= [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]\n","data.sort(reverse=True)\n","print(data)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xpt3szIdL79g","executionInfo":{"status":"ok","timestamp":1726798178081,"user_tz":-540,"elapsed":456,"user":{"displayName":"Subekshya Karki","userId":"18102262113570423530"}},"outputId":"9267fcd9-a68f-4d30-86a3-d574ebfa2be7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\n"]}]},{"cell_type":"code","source":["my_string= 'python 3.0'\n","print(my_string)\n","print(type(my_string))\n","my_tuple= tuple(my_string)\n","print(my_tuple)\n","print(type(my_tuple))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x2wIcSeuMhXf","executionInfo":{"status":"ok","timestamp":1727275963216,"user_tz":-345,"elapsed":459,"user":{"displayName":"Mr Shronal","userId":"17347807462710732592"}},"outputId":"caabf971-73d4-4c13-eb8b-a0e7b4075a79"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["python 3.0\n","<class 'str'>\n","('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')\n","<class 'tuple'>\n"]}]},{"cell_type":"code","source":["data=(4, 3, 2, 2, -1, 18)\n","product=1\n","for x in range (len(data)):\n","  product*=data[x]\n","print(\"product\",product)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lZjn0MShN8CP","executionInfo":{"status":"ok","timestamp":1726800130706,"user_tz":-540,"elapsed":433,"user":{"displayName":"Subekshya Karki","userId":"18102262113570423530"}},"outputId":"089be517-fb34-4279-d369-00c85252d97f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["product -864\n"]}]},{"cell_type":"markdown","source":["Write a Python program to calculate the average value of the numbers in a given tuple of\n","tuples.\n","Original Tuple:\n","((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))\n","Average value of the numbers of the said tuple of tuples:\n","[30.5, 34.25, 27.0, 23.25]\n","Original Tuple:\n","((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))\n","Average value of the numbers of the said tuple of tuples:\n","[25.5, -18.0, 3.75]\n"],"metadata":{"id":"SkMyuEQBTeXj"}},{"cell_type":"code","source":["# prompt:  Write a Python program to calculate the average value of the numbers in a given tuple of\n","# tuples.\n","# Original Tuple:\n","# ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))\n","# Average value of the numbers of the said tuple of tuples:\n","# [30.5, 34.25, 27.0, 23.25]\n","# Original Tuple:\n","# ((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))\n","# Average value of the numbers of the said tuple of tuples:\n","# [\n","\n","def average_tuple_of_tuples(nums):\n","  avg_list = []\n","  for i in range(len(nums[0])):\n","    sum_val = 0\n","    for j in range(len(nums)):\n","      sum_val += nums[j][i]\n","    avg_list.append(sum_val / len(nums))\n","  return avg_list\n","\n","nums = ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))\n","print(\"Original Tuple:\")\n","print(nums)\n","print(\"Average value of the numbers of the said tuple of tuples:\")\n","print(average_tuple_of_tuples(nums))\n","nums = ((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))\n","print(\"\\nOriginal Tuple:\")\n","print(nums)\n","print(\"Average value of the numbers of the said tuple of tuples:\")\n","print(average_tuple_of_tuples(nums))\n"],"metadata":{"id":"xpK-Gy4EV3u6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1727276129977,"user_tz":-345,"elapsed":511,"user":{"displayName":"Mr Shronal","userId":"17347807462710732592"}},"outputId":"c29114f7-b3af-404a-fd0f-6c53345edb33"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Tuple:\n","((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))\n","Average value of the numbers of the said tuple of tuples:\n","[30.5, 34.25, 27.0, 23.25]\n","\n","Original Tuple:\n","((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))\n","Average value of the numbers of the said tuple of tuples:\n","[25.5, -18.0, 3.75]\n"]}]},{"cell_type":"markdown","source":["Write a Python program to compute the element-wise sum of given tuples.\n","Original lists:\n","(1, 2, 3, 4)\n","(3, 5, 2, 1)\n","(2, 2, 3, 1)\n","Element-wise sum of the said tuples:\n","(6, 9, 8, 6)\n","\n"],"metadata":{"id":"JictFyY6V4p8"}},{"cell_type":"code","source":["mytuple = ((1, 2, 3, 4),(3, 5, 2, 1),(2, 2, 3, 1))\n","sum = 0\n","for x in range (len(mytuple)):\n","  for y in range (x, len(mytuple)):\n","    print(x,y)\n","    sum = sum + mytuple[x][y]\n","    if y == 1:\n","      print(x,y)\n","      break\n","print(sum)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3U7nr5tQV77R","executionInfo":{"status":"ok","timestamp":1726801323991,"user_tz":-540,"elapsed":483,"user":{"displayName":"Subekshya Karki","userId":"18102262113570423530"}},"outputId":"2cb4eba3-f374-4123-f49c-df4c053ab36f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0 0\n","0 1\n","0 1\n","1 1\n","1 1\n","2 2\n","11\n"]}]},{"cell_type":"markdown","source":["Write a Python program to compute the sum of all the elements of each tuple stored inside a\n","list of tuples.\n","Original list of tuples:\n","[(1, 2), (2, 3), (3, 4)]\n","Sum of all the elements of each tuple stored inside the said list of tuples:\n","[3, 5, 7]\n"],"metadata":{"id":"LIL_PhZUY19w"}},{"cell_type":"code","source":["a = ((1, 2), (2, 3), (3, 4))\n","b = list(a)\n","c=0\n","sum = 0\n","for x in range (len(a)):\n","  sum = 0\n","  for y in range (0,len(a[x])):\n","    print(x,y)\n","    sum = sum + a[x][y]\n","  b.insert(x,sum)\n","b = tuple(b)\n","print(b)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bm5rmyBwY22J","executionInfo":{"status":"ok","timestamp":1726802185838,"user_tz":-540,"elapsed":441,"user":{"displayName":"Subekshya Karki","userId":"18102262113570423530"}},"outputId":"ce3f4a50-ba01-4271-fc17-360893d8add0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0 0\n","0 1\n","1 0\n","1 1\n","2 0\n","2 1\n","(3, 5, 7)\n"]}]},{"cell_type":"code","source":["# prompt: Write a Python program to create an intersection, a union, set difference and a symmetric\n","# difference of sets. Also find the length, maximum and minimum values in a set.  dont use functions\n","\n","# Intersection of sets\n","set1 = {1, 2, 3, 4, 5}\n","set2 = {4, 5, 6, 7, 8}\n","intersection_set = set()\n","for element in set1:\n","  if element in set2:\n","    intersection_set.add(element)\n","print(\"Intersection:\", intersection_set)\n","\n","# Union of sets\n","union_set = set()\n","for element in set1:\n","  union_set.add(element)\n","for element in set2:\n","  union_set.add(element)\n","print(\"Union:\", union_set)\n","\n","# Set difference\n","difference_set = set()\n","for element in set1:\n","  if element not in set2:\n","    difference_set.add(element)\n","print(\"Difference (set1 - set2):\", difference_set)\n","\n","# Symmetric difference\n","symmetric_difference_set = set()\n","for element in set1:\n","  if element not in set2:\n","    symmetric_difference_set.add(element)\n","for element in set2:\n","  if element not in set1:\n","    symmetric_difference_set.add(element)\n","print(\"Symmetric difference:\", symmetric_difference_set)\n","\n","# Length of a set\n","set3 = {1, 2, 3, 4, 5}\n","length = 0\n","for element in set3:\n","  length += 1\n","print(\"Length of set:\", length)\n","\n","# Maximum value in a set\n","if len(set3) > 0:\n","  max_value = list(set3)[0]\n","  for element in set3:\n","    if element > max_value:\n","      max_value = element\n","  print(\"Maximum value in set:\", max_value)\n","else:\n","  print(\"Set is empty\")\n","\n","\n","# Minimum value in a set\n","if len(set3) > 0:\n","  min_value = list(set3)[0]\n","  for element in set3:\n","    if element < min_value:\n","      min_value = element\n","  print(\"Minimum value in set:\", min_value)\n","else:\n","  print(\"Set is empty\")\n"],"metadata":{"id":"XB4EzjXbr4Ci"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# prompt: Write a Python program to find the longest common prefix of all strings. Use the Python set.  dont use functions\n","\n","strs = [\"flower\", \"flow\", \"flight\"]\n","if not strs:\n","  print(\"\")\n","prefix = strs[0]\n","for i in range(1, len(strs)):\n","  while strs[i].find(prefix) != 0:\n","    prefix = prefix[:-1]\n","    if not prefix:\n","      print(\"\")\n","print(prefix)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AtsVf2wHgkaF","executionInfo":{"status":"ok","timestamp":1727357343754,"user_tz":-345,"elapsed":458,"user":{"displayName":"Mr Shronal","userId":"17347807462710732592"}},"outputId":"60ded2f9-945a-4cdf-f13a-dd60f071f626"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["fl\n"]}]}]}